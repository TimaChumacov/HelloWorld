import React from 'react';
import ReactDOM from 'react-dom';
[hi]


export { as default}



import React from 'react';
import ReactDOM from 'react-dom';

class IndecisionApp extends React.Component {
    state = {
        options: []
    };
    componentDidMount() {
        const json = localStorage.getItem("options");
        this.setState(() => ({options: JSON.parse(json)}))
        
    }

    componentDidUpdate(prevProps, prevState ) {
        if(prevState.options.length !== this.state.options.length) {
            const json = JSON.stringify(this.state.options);
            localStorage.setItem('options', json);
        }
    }

    addNewOption = optionText => this.setState({
        options: [...this.state.options, optionText]
    });

    removeAllOptions = () => this.setState({ options: [] });

    removeOption = optionToRemove => this.setState(() => ({options: this.state.options.filter((option) => {
        return optionToRemove !== option
    })}))

    render() {
        return (
            <div>
                <Header />
                <Subtitle options={this.state.options}/>
                <WhatToDo options={this.state.options}/>
                <Options
                    options={this.state.options}
                    addNewOption={this.addNewOption}
                    removeAllOptions={this.removeAllOptions}
                    removeOption={this.removeOption}
                />
            </div>
        )
    }
}

const Header = props => (
        <div>
            <h1>Indecision App</h1>
            <h2>To do list</h2>
        </div>
);


class WhatToDo extends React.Component {
    constructor(props) {
        super(props);
    }

    Chosing = () => {
        const RandomNum = Math.floor(Math.random() * this.props.options.length);
        alert(this.props.options[RandomNum])
    }

    render() {
        return (<button disabled={this.props.options.length == 0} onClick={this.Chosing}>What should I do?</button>)
    }
}

class Options extends React.Component {

    state = {
        isAdded: false
    };

    onFormSubmit = (e) => {
        e.preventDefault();
        const optionText = e.target.elements.option.value.trim(); //trim удаляет пробелы по бокам

        if (optionText) {
            this.props.addNewOption(optionText);
            e.target.elements.option.value = "";
        } else {
            alert("Please fill the form!");
        }
    };

    changeToForm = () => this.setState({isAdded: true});
    changeToString = () => this.setState({isAdded: false});

    renderForm = () => 
        <form onSubmit={this.onFormSubmit}>
            <input type="text" name="option" id="formForOptions"/>
            <button> Add</button>
            <button onClick = {this.changeToString}> Cancel</button>
        </form>;
    

    render() {
        return (
            <div>
                <button onClick={this.props.removeAllOptions}>RemoveAll</button>
                <ol>
                    {this.props.options.map(op => 
                    <SingleOption
                        key = {op}
                        optionText ={op} 
                        removeOption = {this.props.removeOption}
                    />)}
                </ol>
                {(this.state.isAdded)
                    ? this.renderForm()
                    : <div onClick={this.changeToForm}>Add a Option</div>
                }
            </div>
        )
    }
}

const SingleOption = props =>  <li>To do: {props.optionText}
<button onClick = {(e) => {props.removeOption(props.optionText)}}>remove</button>
</li>

class Subtitle extends React.Component {

    renderLabel = () => (this.props.options.length)
        ? "Here are your options"
        : "You have not options. Add some.";

    render() {
        return (
            <div>
                <b>{this.renderLabel()}</b>
                <span>Now you have: {this.props.options.length}</span>
            </div>
        )
    }
}

ReactDOM.render(<IndecisionApp/>, document.getElementById("root"));